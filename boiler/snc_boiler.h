/*
 * rtc_boiler.h
 *
 * Created: 13.03.2018
 * Author: Antipin
 * Работа с часами реального времени
*/

#ifndef __snc_boiler
#define __snc_boiler

//=================Функция запуска датчиков===================//
void start_sencors()
{
	//Цикл смены номера датчика
	for (int k = 0; k < 3; k++)
	{
		//Указатель на массив команды для данного датчика
		pointer_Flash = init_Sensors[k];
		for (int i = 0; i<7; i++, pointer_Flash++)
		{
			//Запись команды в буфер для передачи
			buf_UART_1[i]=*pointer_Flash;
		}
		//Отправка записанного буфера
		Write_DCON(COM_PORT1, buf_UART_1);
	}
}


//============Функция чтения данных с датчиков================//
void read_sencors(void)
{
	//Вспомогательная переменная для "закрытия" массива буфера
	uint8_t buf_size;
	//Отправка запроса температуры с 1 датчика
	if (time_10_dat == (uint32_t)per_dat_RAM*100)
	{
		//Указатель на массив команды для данного датчика
		pointer_Flash = get_Result_Sensors[0];
		for (int i = 0; i<7; i++, pointer_Flash++)
		{
			//Запись команды в буфер для передачи
			buf_UART_1[i]=*pointer_Flash;
		}
		//Отправка записанного буфера
		Write_DCON(0, buf_UART_1);
		snc_err[0]++;
	}
	
	//Отправка запроса температуры с 2 датчика
	if (time_10_dat == (uint32_t)per_dat_RAM*100+20)
	{
		//Указатель на массив команды для данного датчика
		pointer_Flash = get_Result_Sensors[1];
		for (int i = 0; i<7; i++, pointer_Flash++)
		{
			//Запись команды в буфер для передачи
			buf_UART_1[i]=*pointer_Flash;
		}
		//Отправка записанного буфера
		Write_DCON(0, buf_UART_1);
		snc_err[1]++;
	}
	//Отправка запроса температуры с 3 датчика
	if (time_10_dat == (uint32_t)per_dat_RAM*100+40)
	{
		//Указатель на массив команды для данного датчика
		pointer_Flash = get_Result_Sensors[2];
		for (int i = 0; i<7; i++, pointer_Flash++)
		{
			//Запись команды в буфер для передачи
			buf_UART_1[i]=*pointer_Flash;
		}
		//Отправка записанного буфера
		Write_DCON(0, buf_UART_1);
		snc_err[2]++;
	}
	if (Read_DCON(0, buf_UART_1) == 1)
	{
		//Проверка длины принятого пакета
		buf_size=buf_UART_1[0];
		//Обнуление последнего элемента в буфере
		buf_UART_1[buf_size]=0;
		//Данные приняты от датчика 1
		if (buf_UART_1[5]==2+0x30)
		{
			snc_err[0] = 0;
			//Запись массива символов для отображения показаний датчика 1
			snc1[0]=buf_UART_1[7];
			snc1[1]=buf_UART_1[8];
			snc1[2]='.';
			snc1[3]=buf_UART_1[9];
			snc1[4]=0;
			//Конвертация символьных данных в числовую переменную
			cur_temp[0]=(snc1[0]-0x30)*10000+(snc1[1]-0x30)*1000+(snc1[3]-0x30)*100;
		}
		//Данные приняты от датчика 2
		if (buf_UART_1[5]==3+0x30)
		{
			snc_err[1] = 0;
			//Запись массива символов для отображения показаний датчика 2
			snc2[0]=buf_UART_1[7];
			snc2[1]=buf_UART_1[8];
			snc2[2]='.';
			snc2[3]=buf_UART_1[9];
			snc2[4]=0;
			//Конвертация символьных данных в числовую переменную
			cur_temp[1]=(snc2[0]-0x30)*10000+(snc2[1]-0x30)*1000+(snc2[3]-0x30)*100;
		}
		//Данные приняты от датчика 3
		if (buf_UART_1[5]==4+0x30)
		{
			snc_err[2] = 0;
			//Запись массива символов для отображения показаний датчика 3
			snc3[0]=buf_UART_1[7];
			snc3[1]=buf_UART_1[8];
			snc3[2]='.';
			snc3[3]=buf_UART_1[9];
			snc3[4]=0;
			//Конвертация символьных данных в числовую переменную
			cur_temp[2]=(snc3[0]-0x30)*10000+(snc3[1]-0x30)*1000+(snc3[3]-0x30)*100;
		}
	}
	if (time_10_dat == (uint32_t)per_dat_RAM*100+80)
	{
		//Вызов функции пересчета параметров регулятора
		//uncomment
		// calculate_PID();
		
		//Обнуление таймера считывания датчиков
		time_10_dat=0;
		
		//Запись сообщения о повреждении датчика 1
		if (snc_err[0]>10) {snc1[0] = 'D'; snc1[1] = 'M'; snc1[2] = 'G'; snc1[3] = 'D'; cur_temp[0] = 65500;}
		//Запись сообщения о повреждении датчика 2
		if (snc_err[1]>10) {snc2[0] = 'D'; snc2[1] = 'M'; snc2[2] = 'G'; snc2[3] = 'D';	cur_temp[1] = 65500;}
		//Запись сообщения о повреждении датчика 3
		if (snc_err[2]>10) {snc3[0] = 'D'; snc3[1] = 'M'; snc3[2] = 'G'; snc3[3] = 'D'; cur_temp[2] = 65500;}
		// Флаг отображения на основном экране
		flag_O = 1;
	}
}

#endif